output <- "test"
input <- "../dataPANAM/PANAM2/V4-result-unified-095-199/OTU_distribution_tax.txt"
region <- "V4"
sortop <- "no"
Taxonomy <- "LCA"
Mode <- "Superphylum"
Group <- "Eukaryota"
RarefyYoN <- "yes"
UnifyYoN <- "yes"
# Import package and palette -----------------------------------------------------------
pkg <- c("ggplot2", "readxl","dplyr","tidyr","cowplot","FactoMineR","factoextra","reshape2","varhandle","ggrepel","ggpubr","ggsci","scales","hrbrthemes","GUniFrac","svglite","treemap", "VennDiagram")
lapply(pkg, require, character.only = TRUE)
#palette <-  sample(c(pal_locuszoom(alpha = 0.8)(7), pal_lancet(alpha = 0.8)(9)))
#show_col(palette)
#palette <- c("#D43F3ACC","#EEA236CC","#AD002ACC","#46B8DACC","#357EBDCC","#9632B8CC","#B8B8B8CC","#00468BCC","#ED0000CC","#42B540CC","#0099B4CC","#925E9FCC")
palette <- c("#AD002ACC","#EEA236CC","#00468BCC","#0099B4CC","#D62768CC","#ADB6B6CC","#42B540CC","#357EBDCC","#1B1919CC","#ED0000CC","#FF7F0ECC","#925E9FCC","#D43F3ACC","#9632B8CC","#46B8DACC","#5CB85CCC","#EFC008CC")
show_col(palette)
input <- paste("..",input, sep = "/")
output <- paste("../result",output, sep = "/")
if (dir.exists("../result") == FALSE) { dir.create("../result") }
if (dir.exists(output) == FALSE) { dir.create(output) }
if (dir.exists(output) == TRUE) { setwd(output) }
system("mkdir Stat-Analyse")
system("mkdir Composition")
system("mkdir Hist-Taxomy")
system("mkdir Hist-Function")
system("mkdir AFC-Distribution")
system("mkdir Table")
system("mkdir Biplot")
system("mkdir Venn")
# Enter mode and Group to study -------------------------------------------
if (length(args)==2) {
cat("Enter mode (Superphylum or Phylum or Class) : ");
Mode <- readLines("stdin",n=1);
cat("You entered")
str(Mode);
cat( "\n" )}
if (length(args)>2) {
Mode <- args[8]
}
if (Mode == "Phylum") {
if (length(args)==2) {
cat("Enter Phylum (Fungi, Alveolata, etc) : ");
Group <- readLines("stdin",n=1);
cat("You entered")
str(Group);
cat( "\n" )}
if (length(args)>2) {
Group <- args[9]}
}
if (Mode == "Class") {
if (length(args)==2) {
cat("Enter Class (Bacillariophyta, Synurophyceae, etc) : ");
Group <- readLines("stdin",n=1);
cat("You entered")
str(Group);
cat( "\n" )}
if (length(args)>2) {
Group <- args[9]}
}
# Theme unique Dark perso -------------------------------------------------------
theme_unique_dark <- function (base_size = 12, base_family = "") {
ret <- (theme_bw(base_size = base_size, base_family = base_family) +
theme(text = element_text(colour = "black"),
title = element_text(color = "black", face = "bold"),
axis.ticks = element_blank(),
line = element_line(color = "black"),
rect = element_rect(fill = "white", color = "black"),
axis.title = element_text(color = "black", face = "bold"),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
#axis.text.x = element_text(color = "black", size = 8, vjust = 2),
axis.line = element_line(color = "#969696", linetype = 1),
legend.background = element_rect(fill = NULL, color = NULL),
legend.position = "bottom",
legend.key = element_rect(fill = NA, color = NA, linetype = 0),
legend.text = element_text(size = 8),
legend.title = element_text(size = 8, face="bold"),
strip.background = element_rect(fill=NA,colour=NA,size=NA,linetype = NULL),
strip.text = element_text(color="black",face="bold",vjust=.5,hjust=.5),
panel.background = element_rect(fill = "white", color = NULL),
panel.border = element_blank(),
panel.grid = element_line(color = "#252525"),
panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
plot.background = element_rect(fill = "white", colour = "white", linetype = 0)))
ret
}
# Theme unique Dark perso 2 -------------------------------------------------------
theme_unique_darkbis <- function (base_size = 12, base_family = "") {
ret <- (theme_bw(base_size = base_size, base_family = base_family) +
theme(text = element_text(colour = "black"),
title = element_text(color = "black", face = "bold", vjust = 0.5, hjust = 0.5),
axis.ticks = element_blank(),
line = element_line(color = "black"),
rect = element_rect(fill = "white", color = "black"),
axis.title = element_text(color = "black", face = "bold"),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.line = element_line(color = "#969696", linetype = 1),
legend.background = element_rect(fill = NULL, color = NULL),
legend.position = "none",
legend.key = element_rect(fill = NA, color = NA, linetype = 0),
legend.text = element_text(size = 8),
legend.title = element_text(size = 8, face="bold"),
strip.background = element_rect(fill=NA,colour=NA,size=NA,linetype = NULL),
strip.text = element_text(color="black",face="bold",vjust=.5,hjust=.5),
panel.background = element_rect(fill = "white", color = NULL),
panel.border = element_blank(),
panel.grid = element_line(color = "#252525"),
panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
plot.background = element_rect(fill = "white", colour = "white", linetype = 0)))
ret
}
# Input OTU Table ---------------------------------------------------------
tableVinput <- read.csv(file = input, sep = "\t", row.names = "OTU_Id")
##0.0005% filter
if (length(args)==2) {
cat("Should I filter 0.0005% of total OTUs (yes or no) ? : ");
sortop <- readLines("stdin",n=1);
cat("You entered")
str(sortop);
cat( "\n" )}
if (length(args)>2) {
sortop <- args[4]
}
if (sortop == "yes") {
amplicon <- grep(pattern = "OSTA", colnames(tableVinput), value = TRUE)
tableVinput$SUM <- rowSums(tableVinput %>% select(all_of(amplicon)))
tableVinput <- tableVinput %>% filter(SUM > 0.0005*sum(tableVinput$SUM)/100)
tableVinput <- tableVinput %>% select(-"SUM")
}
# Prepare data inf --------------------------------------------------------
infdataini <- read.table(file = "../../rawdata/data-inf.txt", sep = "\t", header = FALSE,row.names = "row", col.names = c("row","Id","Condition","Technologie","Region"))
infdataini$Rep <- rep("_1", each = nrow(infdataini))
infdataini$Variable <- paste(infdataini$Condition,infdataini$Rep, sep = "")
infdataini <- infdataini %>% select(-"Rep",-"Condition")
infdataini <- separate(infdataini, Variable, c("Condition","Date","Replicat"), sep = "_")
for (i in row.names(infdataini)) {
if (infdataini[i,"Replicat"] == "01") infdataini[i,"Replicat"] <- "1"
if (infdataini[i,"Replicat"] == "02") infdataini[i,"Replicat"] <- "2"
}
infdataini$OSTA <- rep("OSTA", each = nrow(infdataini))
infdataini$Variable <- paste(infdataini$Id,infdataini$OSTA, sep = "")
infdataini <- infdataini %>% select(-"Id",-"OSTA")
infdataini <- separate(infdataini, Variable, c("Cin","Amplicon"), sep = "_")
infdataini <- infdataini %>% select(-"Cin")
## FR sample (V9 in reality and not V4)
for (i in row.names(infdataini)) { if (infdataini[i,"Amplicon"] == "FROSTA") { infdataini[i,"Region"] <- "V9"}}
for (i in row.names(infdataini)) { if (infdataini[i,"Amplicon"] == "FROSTA") { infdataini[i,"Technologie"] <- "Miseq"}}
## Prepare sample_df
infdataini <- separate(infdataini, Condition, c("empty","ADN","Cycle","Zone","Fraction"),sep = "")
infdataini <- infdataini %>% select(-"empty")
infdataini<-as.data.frame(infdataini)
col <- c("Amplicon","Technologie","Region","ADN","Cycle","Zone","Fraction","Date","Replicat")
samples_df <- infdataini[,all_of(col)]
samples_df$Condition <- paste(samples_df$ADN,samples_df$Cycle,samples_df$Zone,samples_df$Fraction, sep = "")
for (i in row.names(samples_df)) {
if (samples_df[i,"Cycle"] == "J") { samples_df[i,"Cycle"] <- "Jour"}
if (samples_df[i,"Cycle"] == "N") { samples_df[i,"Cycle"] <- "Nuit"}
if (samples_df[i,"Zone"] == "O") { samples_df[i,"Zone"] <- "Oxique"}
if (samples_df[i,"Zone"] == "A") { samples_df[i,"Zone"] <- "Anoxique"}
if (samples_df[i,"Fraction"] == "G") { samples_df[i,"Fraction"] <- "Grande"}
if (samples_df[i,"Fraction"] == "P") { samples_df[i,"Fraction"] <- "Petite"}}
# Select V4 or V9 ---------------------------------------------------------
samples_df<-filter(samples_df, Region == region)
# Prepare  Object -------------------------------------------------
