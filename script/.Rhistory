rarecurveop <- readline(prompt="Should I calculate the rarefaction curves (yes or no) ?")
rarecurveop <- readline(prompt="Should I calculate the rarefaction curves (yes or no) ? : ")
dir.create(result/test/test)
dir.create(path = result/test/test, recursive = TRUE)
dir.create(paths = result/test/test, recursive = TRUE)
dir.create(path = result/test/test, recursive = TRUE)
dir.create(path = result/test/test, recursive = FALSE)
# Prepare data inf --------------------------------------------------------
infdataini <- read.table(file = "../rawdata/data-inf.txt", sep = "\t", header = FALSE, col.names = c("row","Id","Conditions","Technologies","Regions"))
infdataini <- infdataini %>% select(-"row")
infdataini$Rep <- rep("_1", each = nrow(infdataini))
infdataini$Variable <- paste(infdataini$Condition,infdataini$Rep, sep = "")
infdataini <- infdataini %>% select(-"Rep",-"Conditions")
infdataini <- separate(infdataini, Variable, c("Conditions","Dates","Replicats"), sep = "_")
x <- 0
for (i in infdataini$Replicats) {
x <- x+1
if (i == "01") infdataini[x,6] <- "1"
if (i == "02") infdataini[x,6] <- "2"
}
infdataini$OSTA <- rep("OSTA", each = nrow(infdataini))
infdataini$Variable <- paste(infdataini$Id,infdataini$OSTA, sep = "")
infdataini <- infdataini %>% select(-"Id",-"OSTA")
infdataini <- separate(infdataini, Variable, c("Cin","Variable"), sep = "_")
infdataini <- infdataini %>% select(-"Cin")
# FR sample (V9 in reality and not V4)
for (i in row.names(infdataini)) { if (infdataini[i,"Variable"] == "FROSTA") { infdataini[i,"Regions"] <- "V9"}}
for (i in row.names(infdataini)) { if (infdataini[i,"Variable"] == "FROSTA") { infdataini[i,"Technologies"] <- "Miseq"}}
# Prepare sample_df
infdataini[infdataini == "DJOG"] <- "D;J;O;G"
infdataini[infdataini == "DJOP"] <- "D;J;O;P"
infdataini[infdataini == "DJAG"] <- "D;J;A;G"
infdataini[infdataini == "DJAP"] <- "D;J;A;P"
infdataini[infdataini == "DNOG"] <- "D;N;O;G"
infdataini[infdataini == "DNOP"] <- "D;N;O;P"
infdataini[infdataini == "DNAG"] <- "D;N;A;G"
infdataini[infdataini == "DNAP"] <- "D;N;A;P"
infdataini<-as.data.frame(infdataini)
infdataini <- separate(infdataini, Conditions, c("ADN","Jour_Nuit","Oxique_Anoxique","Grande_Petite"),sep = ";")
pattern <- c("Variable","Technologies","Regions","ADN","Jour_Nuit","Oxique_Anoxique","Grande_Petite","Dates","Replicats")
samples_df <- infdataini[,pattern]
samples_df$Conditions <- paste(samples_df$ADN,samples_df$Jour_Nuit,samples_df$Oxique_Anoxique,samples_df$Grande_Petite, sep = "")
colnames(samples_df) <- c("sample","Technologies","Regions","ADN","Cycle","Fraction-Oxygène","Fraction-Taille","Dates","Replicats","Conditions")
w <- 0
for (i in samples_df$Cycle) { w <- w +1
if (i == "J") { samples_df[w,"Cycle"] <- "Jour"}
if (i == "N") { samples_df[w,"Cycle"] <- "Nuit"}}
w <- 0
for (i in samples_df$`Fraction-Oxygène`) { w <- w +1
if (i == "O") { samples_df[w,"Fraction-Oxygène"] <- "Oxique"}
if (i == "A") { samples_df[w,"Fraction-Oxygène"] <- "Anoxique"}}
w <- 0
for (i in samples_df$`Fraction-Taille`) { w <- w +1
if (i == "G") { samples_df[w,"Fraction-Taille"] <- "Grande"}
if (i == "P") { samples_df[w,"Fraction-Taille"] <- "Petite"}}
View(infdataini)
pkg <- c("ggplot2", "readxl","dplyr","tidyr","cowplot","FactoMineR","factoextra","reshape2","varhandle","ggrepel","ggpubr","ggsci","scales","hrbrthemes","GUniFrac","svglite")
lapply(pkg, require, character.only = TRUE)
# Prepare data inf --------------------------------------------------------
infdataini <- read.table(file = "../rawdata/data-inf.txt", sep = "\t", header = FALSE, col.names = c("row","Id","Conditions","Technologies","Regions"))
infdataini <- infdataini %>% select(-"row")
infdataini$Rep <- rep("_1", each = nrow(infdataini))
infdataini$Variable <- paste(infdataini$Condition,infdataini$Rep, sep = "")
infdataini <- infdataini %>% select(-"Rep",-"Conditions")
infdataini <- separate(infdataini, Variable, c("Conditions","Dates","Replicats"), sep = "_")
x <- 0
for (i in infdataini$Replicats) {
x <- x+1
if (i == "01") infdataini[x,6] <- "1"
if (i == "02") infdataini[x,6] <- "2"
}
infdataini$OSTA <- rep("OSTA", each = nrow(infdataini))
infdataini$Variable <- paste(infdataini$Id,infdataini$OSTA, sep = "")
infdataini <- infdataini %>% select(-"Id",-"OSTA")
infdataini <- separate(infdataini, Variable, c("Cin","Variable"), sep = "_")
infdataini <- infdataini %>% select(-"Cin")
# FR sample (V9 in reality and not V4)
for (i in row.names(infdataini)) { if (infdataini[i,"Variable"] == "FROSTA") { infdataini[i,"Regions"] <- "V9"}}
for (i in row.names(infdataini)) { if (infdataini[i,"Variable"] == "FROSTA") { infdataini[i,"Technologies"] <- "Miseq"}}
# Prepare sample_df
infdataini[infdataini == "DJOG"] <- "D;J;O;G"
infdataini[infdataini == "DJOP"] <- "D;J;O;P"
infdataini[infdataini == "DJAG"] <- "D;J;A;G"
infdataini[infdataini == "DJAP"] <- "D;J;A;P"
infdataini[infdataini == "DNOG"] <- "D;N;O;G"
infdataini[infdataini == "DNOP"] <- "D;N;O;P"
infdataini[infdataini == "DNAG"] <- "D;N;A;G"
infdataini[infdataini == "DNAP"] <- "D;N;A;P"
infdataini<-as.data.frame(infdataini)
infdataini <- separate(infdataini, Conditions, c("ADN","Jour_Nuit","Oxique_Anoxique","Grande_Petite"),sep = ";")
pattern <- c("Variable","Technologies","Regions","ADN","Jour_Nuit","Oxique_Anoxique","Grande_Petite","Dates","Replicats")
samples_df <- infdataini[,pattern]
samples_df$Conditions <- paste(samples_df$ADN,samples_df$Jour_Nuit,samples_df$Oxique_Anoxique,samples_df$Grande_Petite, sep = "")
colnames(samples_df) <- c("sample","Technologies","Regions","ADN","Cycle","Fraction-Oxygène","Fraction-Taille","Dates","Replicats","Conditions")
w <- 0
for (i in samples_df$Cycle) { w <- w +1
if (i == "J") { samples_df[w,"Cycle"] <- "Jour"}
if (i == "N") { samples_df[w,"Cycle"] <- "Nuit"}}
w <- 0
for (i in samples_df$`Fraction-Oxygène`) { w <- w +1
if (i == "O") { samples_df[w,"Fraction-Oxygène"] <- "Oxique"}
if (i == "A") { samples_df[w,"Fraction-Oxygène"] <- "Anoxique"}}
w <- 0
for (i in samples_df$`Fraction-Taille`) { w <- w +1
if (i == "G") { samples_df[w,"Fraction-Taille"] <- "Grande"}
if (i == "P") { samples_df[w,"Fraction-Taille"] <- "Petite"}}
# Input OTU Table ---------------------------------------------------------
tableVinput <- read.csv(file = input, sep = "\t")
input <- "../dataPANAM/PANAM2/V4-result-095/OTU_distribution_tax.txt
""
"
input <- "../dataPANAM/PANAM2/V4-result-095/OTU_distribution_tax.txt"
tableVinput <- read.csv(file = input, sep = "\t")
# Theme unique Dark perso -------------------------------------------------------
theme_unique_dark <- function (base_size = 12, base_family = "") {
ret <- (theme_bw(base_size = base_size, base_family = base_family) +
theme(text = element_text(colour = "black"),
title = element_text(color = "black", face = "bold"),
axis.ticks = element_blank(),
line = element_line(color = "black"),
rect = element_rect(fill = "white", color = "black"),
axis.title = element_text(color = "black", face = "bold"),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
#axis.text.x = element_text(color = "black", size = 8, vjust = 2),
axis.line = element_line(color = "#969696", linetype = 1),
legend.background = element_rect(fill = NULL, color = NULL),
legend.position = "bottom",
legend.key = element_rect(fill = NA, color = NA, linetype = 0),
legend.text = element_text(size = 8),
legend.title = element_text(size = 8, face="bold"),
strip.background = element_rect(fill=NA,colour=NA,size=NA,linetype = NULL),
strip.text = element_text(color="black",face="bold",vjust=.5,hjust=.5),
panel.background = element_rect(fill = "white", color = NULL),
panel.border = element_blank(),
panel.grid = element_line(color = "#252525"),
panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
plot.background = element_rect(fill = "white", colour = "white", linetype = 0)))
ret
}
# Prepare data inf --------------------------------------------------------
infdataini <- read.table(file = "../rawdata/data-inf.txt", sep = "\t", header = FALSE, col.names = c("row","Id","Conditions","Technologies","Regions"))
infdataini <- infdataini %>% select(-"row")
infdataini$Rep <- rep("_1", each = nrow(infdataini))
infdataini$Variable <- paste(infdataini$Condition,infdataini$Rep, sep = "")
infdataini <- infdataini %>% select(-"Rep",-"Conditions")
infdataini <- separate(infdataini, Variable, c("Conditions","Dates","Replicats"), sep = "_")
x <- 0
for (i in infdataini$Replicats) {
x <- x+1
if (i == "01") infdataini[x,6] <- "1"
if (i == "02") infdataini[x,6] <- "2"
}
infdataini$OSTA <- rep("OSTA", each = nrow(infdataini))
infdataini$Variable <- paste(infdataini$Id,infdataini$OSTA, sep = "")
infdataini <- infdataini %>% select(-"Id",-"OSTA")
infdataini <- separate(infdataini, Variable, c("Cin","Variable"), sep = "_")
infdataini <- infdataini %>% select(-"Cin")
# FR sample (V9 in reality and not V4)
for (i in row.names(infdataini)) { if (infdataini[i,"Variable"] == "FROSTA") { infdataini[i,"Regions"] <- "V9"}}
for (i in row.names(infdataini)) { if (infdataini[i,"Variable"] == "FROSTA") { infdataini[i,"Technologies"] <- "Miseq"}}
# Prepare sample_df
infdataini[infdataini == "DJOG"] <- "D;J;O;G"
infdataini[infdataini == "DJOP"] <- "D;J;O;P"
infdataini[infdataini == "DJAG"] <- "D;J;A;G"
infdataini[infdataini == "DJAP"] <- "D;J;A;P"
infdataini[infdataini == "DNOG"] <- "D;N;O;G"
infdataini[infdataini == "DNOP"] <- "D;N;O;P"
infdataini[infdataini == "DNAG"] <- "D;N;A;G"
infdataini[infdataini == "DNAP"] <- "D;N;A;P"
infdataini<-as.data.frame(infdataini)
infdataini <- separate(infdataini, Conditions, c("ADN","Jour_Nuit","Oxique_Anoxique","Grande_Petite"),sep = ";")
pattern <- c("Variable","Technologies","Regions","ADN","Jour_Nuit","Oxique_Anoxique","Grande_Petite","Dates","Replicats")
samples_df <- infdataini[,pattern]
samples_df$Conditions <- paste(samples_df$ADN,samples_df$Jour_Nuit,samples_df$Oxique_Anoxique,samples_df$Grande_Petite, sep = "")
colnames(samples_df) <- c("sample","Technologies","Regions","ADN","Cycle","Fraction-Oxygène","Fraction-Taille","Dates","Replicats","Conditions")
w <- 0
for (i in samples_df$Cycle) { w <- w +1
if (i == "J") { samples_df[w,"Cycle"] <- "Jour"}
if (i == "N") { samples_df[w,"Cycle"] <- "Nuit"}}
w <- 0
for (i in samples_df$`Fraction-Oxygène`) { w <- w +1
if (i == "O") { samples_df[w,"Fraction-Oxygène"] <- "Oxique"}
if (i == "A") { samples_df[w,"Fraction-Oxygène"] <- "Anoxique"}}
w <- 0
for (i in samples_df$`Fraction-Taille`) { w <- w +1
if (i == "G") { samples_df[w,"Fraction-Taille"] <- "Grande"}
if (i == "P") { samples_df[w,"Fraction-Taille"] <- "Petite"}}
region <- "V4"
# Rarefy ---------------------------------------------------------------------
pattern <- c(grep(pattern = "OSTA", colnames(tableVinput), value = FALSE, fixed = FALSE))
otu_mat <- tableVinput %>% select(OTU_Id,pattern)
row.names(otu_mat) <- otu_mat$OTU_Id
otu_mat <- otu_mat %>% select(-OTU_Id)
otu_mat[,] <- lapply(otu_mat[,], as.numeric)
otu_matx <- t(otu_mat)
sequence_mat_rare <- t(Rarefy(otu_matx)$otu.tab.rff)
View(sequence_mat_rare)
# PA-AB ------------------------------------------------------------------
otu_mat_rare<- sequence_mat_rare
pattern <- c(grep(pattern = "OSTA", colnames(otu_mat_rare), value = FALSE, fixed = FALSE))
otu_mat_rare[,pattern][otu_mat_rare[,pattern] != 0] <- 1
#Stat Rarefy
#Sequence
avRarefyS <- as.data.frame(colSums(otu_mat))
apRarefyS <- as.data.frame(colSums(sequence_mat_rare))
statRarefy <- cbind(avRarefyS,apRarefyS)
#OTU
otu_mat_uniq <- otu_mat
otu_mat_uniq[otu_mat_uniq != 0] <- 1
avRarefyO <- as.data.frame(colSums(otu_mat_uniq))
apRarefyO <- as.data.frame(colSums(otu_mat_rare))
statRarefy <- cbind(statRarefy,avRarefyO,apRarefyO)
statRarefy["Total",]<-colSums(statRarefy)
colnames(statRarefy) <- c("avRarefy-Sequence","apRarefy-Sequence","avRarefy-OTU","apRarefy-OTU")
write.table(statRarefy, file = "TableOnly/StatRarefy_withDuplicat.txt", sep = "\t", col.names = TRUE, row.names = TRUE, quote = FALSE)
View(samples_df)
# AFC Plot ----------------------------------------------------------------
dt <- as.data.frame(otu_mat_rare)
dt <- dt[,-1]
res.ca <- CA (dt, graph = FALSE,ncp = 2 )
pdf("AFC-Duplicat/AFC_OTU.pdf",width = 16.00,height = 9.00)
fviz_ca_col(res.ca, repel = TRUE, col.col = "lightgreen") + theme_unique_dark()
dev.off()
p <- get_ca_col(res.ca)
coord <- p$coord
coord <- as.data.frame(coord)
coord$sample <- row.names(coord)
data <- merge(x = coord, y = samples_df, by= "sample")
fviz_screeplot (res.ca, addlabels = TRUE, ylim = c(0, 50))
Xseq <- fviz_screeplot (res.ca, addlabels = TRUE, ylim = c(0, 50))
Xseq <- Xseq$data
Dim1Seq <- paste("Dim 1 [",round(Xseq %>% filter(dim == 1) %>% select(eig),1),"%]", sep = "")
Dim2Seq <- paste("Dim 2 [",round(Xseq %>% filter(dim == 2) %>% select(eig),1),"%]", sep = "")
a <- ggplot(data, aes(y = `Dim 1`, x = `Dim 2`)) + geom_point(aes(color = Conditions, shape = Dates), size = 2) +
geom_hline(yintercept=0, linetype=2, color = "black", size=0.2) +
geom_vline(xintercept=0, linetype=2, color = "black", size=0.2) +
facet_grid(~Dates, switch = "x") + theme_bw() +
geom_label_repel(aes(label = sample,fill = Conditions), color = 'white',size = 2.5, segment.size = 0,segment.color = "black", alpha = 0.8) +
geom_polygon(aes(color = Conditions)) +
theme(axis.title = element_text(face="bold", size=12),
axis.text.x = element_text(angle=90, size=10, hjust = 1, vjust=0.5),
title = element_text(face="bold", size=14),
legend.title = element_text(face="bold"),
legend.position = "right",
legend.text = element_text(size=10)) +
labs(title="Analyse Factorielle des Correspondances",x=Dim1Seq,y=Dim2Seq) +
guides(color = FALSE)
print(a)
a <- ggplot(data %>% filter(Dates == "04"), aes(y = `Dim 1`, x = `Dim 2`)) + geom_point(aes(color = Conditions, shape = Dates), size = 3) +
geom_hline(yintercept=0, linetype=2, color = "black", size=0.2) +
geom_vline(xintercept=0, linetype=2, color = "black", size=0.2) +
geom_label_repel(aes(label = sample,fill = Conditions), color = 'white',size = 4, segment.size = 0.5,segment.color = "black", alpha = 0.8) +
#geom_polygon(aes(color = Conditions)) +
theme(axis.title = element_text(face="bold", size=12),
axis.text.x = element_text(angle=90, size=10, hjust = 1, vjust=0.5),
title = element_text(face="bold", size=14),
legend.title = element_text(face="bold"),
legend.position = "right",
legend.text = element_text(size=10)) +
labs(x=Dim1Seq,y=Dim2Seq) +
guides(shape = FALSE, color = FALSE) + labs(color = "Conditions")
print(a)
View(data)
dt <- as.data.frame(otu_mat_rare)
View(dt)
View(sequence_mat_rare)
hrbrthemes::import_roboto_condensed()
hrbrthemes::import_arial_narrow()
require("parallel")
"parallel" %in% rownames(installed.packages())
dependencies <- c("parallel","GUniFrac","ggplot2","dplyr","cowplot","ggrepel","ggsci","scales","varhandle","FactoMineR","factoextra","reshape2","ggpubr","hrbrthemes","svglite")
dependencies %in% rownames(installed.packages())
check <- dependencies %in% rownames(installed.packages())
if ( check == "TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE") { print ("dependencies installed")}
check
class(check)
ok <- as.logical("TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE")
ok <- as.logical(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE)
ok <- as.logical(c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE))
if ( check == ok) { print ("dependencies installed")}
if (check == ok) { print ("dependencies installed")}
defaultW <- getOption("warn")
options(warn = -1)
dependencies <- c("parallel","GUniFrac","ggplot2","dplyr","cowplot","ggrepel","ggsci","scales","varhandle","FactoMineR","factoextra","reshape2","ggpubr","hrbrthemes","svglite")
check <- dependencies %in% rownames(installed.packages())
ok <- as.logical(c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE))
if (check == ok) {print ("dependencies installed")}
options(warn = defaultW)
defaultW <- getOption("warn")
options(warn = -1)
dependencies <- c("parallel","GUniFrac","ggplot2","dplyr","cowplot","ggrepel","ggsci","scales","varhandle","FactoMineR","factoextra","reshape2","ggpubr","hrbrthemes","svglite")
check <- dependencies %in% rownames(installed.packages())
ok <- as.logical(c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE))
if (check == ok) {print ("Dependencies installed",quote = FALSE)}
options(warn = defaultW)
message("Dependencies installed",quote = FALSE)
message("Dependencies installed")
print("Depe")
T/2
T
getOption("mc.cores", ifelse(max.cores, detectCores(), nCores))
detectCores
detectCores()
mc <- getOption("mc.cores", ifelse(detectCores())
mc <- getOption("mc.cores", ifelse(max.cores, detectCores(), nCores))
library(parallel)
mc <- getOption("mc.cores", ifelse(max.cores, detectCores(), nCores))
detectCores()
detectCores()/2
max.cores
