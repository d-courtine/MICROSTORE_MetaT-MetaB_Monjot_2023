totalAnoxiqueASV <- data_asv_tax %>% select(ASV_Id,TotalAnoxique,DivisionMix)
row.names(totalAnoxiqueASV)<-totalAnoxiqueASV$ASV_Id ; totalAnoxiqueASV <- totalAnoxiqueASV %>% select(-ASV_Id)
totalAnoxiqueASV <- totalAnoxiqueASV %>% group_by(DivisionMix) %>% summarise_all(sum)
totalAnoxiqueASV$TotalAnoxique <- totalAnoxiqueASV$TotalAnoxique*100/sum(totalAnoxiqueASV$TotalAnoxique)
totalAnoxiqueASV <- totalAnoxiqueASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(TotalAnoxique) - 0.5*TotalAnoxique)
totalAnoxiqueASV$label <- paste(round(totalAnoxiqueASV$TotalAnoxique,1), "%", sep = "")
for (i in rownames(totalAnoxiqueASV)) {
if (totalAnoxiqueASV[i,"label"] == "0%") { totalAnoxiqueASV[i,"label"] <- NA}}
for (i in rownames(totalAnoxiqueASV)) {
if (is.na(totalAnoxiqueASV[i,"label"]) == FALSE) { totalAnoxiqueASV[i,"label"] <- paste(totalAnoxiqueASV[i,"DivisionMix"]," : ",totalAnoxiqueASV[i,"label"], sep = "")}}
totalAnoxiqueASV$Zone<- rep("Anoxique", each = nrow(totalAnoxiqueASV))
## Zone
colnames(totalOxiqueASV)[2]  <- "value"
totalOxiqueASV$Sum <- rep(0, each = nrow(totalOxiqueASV))
totalOxiqueASV$Count <- rep(0, each = nrow(totalOxiqueASV))
for (i in totalOxiqueASV$DivisionMix) { totalOxiqueASV$Count[which(totalOxiqueASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(TotalOxique))}
totalOxiqueASV$Sum <- sum(totalOxiqueASV$Count)
colnames(totalAnoxiqueASV)[2]  <- "value"
totalAnoxiqueASV$Sum <- rep(0, each = nrow(totalAnoxiqueASV))
totalAnoxiqueASV$Count <- rep(0, each = nrow(totalAnoxiqueASV))
for (i in totalAnoxiqueASV$DivisionMix) { totalAnoxiqueASV$Count[which(totalAnoxiqueASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(TotalAnoxique))}
totalAnoxiqueASV$Sum <- sum(totalAnoxiqueASV$Count)
totalZoneASV <- rbind(totalOxiqueASV,totalAnoxiqueASV)
#Figure
by <- ggplot(totalZoneASV, mapping = aes(y= value, x = Zone, fill = DivisionMix, group = DivisionMix), Rowv = NA, col = colMain, scale = "column") + geom_bar(stat="identity") + scale_fill_manual(values = paletxi) +
geom_label(aes(y = 106,label = paste(Sum," ASVs",sep ="\n")),color = "white",size = 3,show.legend = FALSE, fill = "#3B3B3B99")
by <- by + labs(x="Zones",y="ASVs (%)") + theme(legend.position = "none")
print(by)
View(data_asv_tax)
View(data_seq_tax)
# Date -------------------------------------------------------------------
## Avril
total04ASV <- data_asv_tax %>% select(ASV_Id,Total04,DivisionMix)
row.names(total04ASV)<-total04ASV$ASV_Id ; total04ASV <- total04ASV %>% select(-ASV_Id)
total04ASV <- total04ASV %>% group_by(DivisionMix) %>% summarise_all(sum)
total04ASV$Total04 <- total04ASV$Total04*100/sum(total04ASV$Total04)
total04ASV <- total04ASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(Total04) - 0.5*Total04)
total04ASV$label <- paste(round(total04ASV$Total04,1), "%", sep = "")
for (i in rownames(total04ASV)) {
if (total04ASV[i,"label"] == "0%") { total04ASV[i,"label"] <- NA}}
for (i in rownames(total04ASV)) {
if (is.na(total04ASV[i,"label"]) == FALSE) { total04ASV[i,"label"] <- paste(total04ASV[i,"DivisionMix"]," : ",total04ASV[i,"label"], sep = "")}}
total04ASV$Date<- rep("04", each = nrow(total04ASV))
## Juin
total06ASV <- data_asv_tax %>% select(ASV_Id,Total06,DivisionMix)
row.names(total06ASV)<-total06ASV$ASV_Id ; total06ASV <- total06ASV %>% select(-ASV_Id)
total06ASV <- total06ASV %>% group_by(DivisionMix) %>% summarise_all(sum)
total06ASV$Total06 <- total06ASV$Total06*100/sum(total06ASV$Total06)
total06ASV <- total06ASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(Total06) - 0.5*Total06)
total06ASV$label <- paste(round(total06ASV$Total06,1), "%", sep = "")
for (i in rownames(total06ASV)) {
if (total06ASV[i,"label"] == "0%") { total06ASV[i,"label"] <- NA}}
for (i in rownames(total06ASV)) {
if (is.na(total06ASV[i,"label"]) == FALSE) { total06ASV[i,"label"] <- paste(total06ASV[i,"DivisionMix"]," : ",total06ASV[i,"label"], sep = "")}}
total06ASV$Date<- rep("06", each = nrow(total06ASV))
## Septembre
total09ASV <- data_asv_tax %>% select(ASV_Id,Total09,DivisionMix)
row.names(total09ASV)<-total09ASV$ASV_Id ; total09ASV <- total09ASV %>% select(-ASV_Id)
total09ASV <- total09ASV %>% group_by(DivisionMix) %>% summarise_all(sum)
total09ASV$Total09 <- total09ASV$Total09*100/sum(total09ASV$Total09)
total09ASV <- total09ASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(Total09) - 0.5*Total09)
total09ASV$label <- paste(round(total09ASV$Total09,1), "%", sep = "")
for (i in rownames(total09ASV)) {
if (total09ASV[i,"label"] == "0%") { total09ASV[i,"label"] <- NA}}
for (i in rownames(total09ASV)) {
if (is.na(total09ASV[i,"label"]) == FALSE) { total09ASV[i,"label"] <- paste(total09ASV[i,"DivisionMix"]," : ",total09ASV[i,"label"], sep = "")}}
total09ASV$Date<- rep("09", each = nrow(total09ASV))
## Octobre
total11ASV <- data_asv_tax %>% select(ASV_Id,Total11,DivisionMix)
row.names(total11ASV)<-total11ASV$ASV_Id ; total11ASV <- total11ASV %>% select(-ASV_Id)
total11ASV <- total11ASV %>% group_by(DivisionMix) %>% summarise_all(sum)
total11ASV$Total11 <- total11ASV$Total11*100/sum(total11ASV$Total11)
total11ASV <- total11ASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(Total11) - 0.5*Total11)
total11ASV$label <- paste(round(total11ASV$Total11,1), "%", sep = "")
for (i in rownames(total11ASV)) {
if (total11ASV[i,"label"] == "0%") { total11ASV[i,"label"] <- NA}}
for (i in rownames(total11ASV)) {
if (is.na(total11ASV[i,"label"]) == FALSE) { total11ASV[i,"label"] <- paste(total11ASV[i,"DivisionMix"]," : ",total11ASV[i,"label"], sep = "")}}
total11ASV$Date<- rep("11", each = nrow(total11ASV))
## Date
colnames(total04ASV)[2]  <- "value"
total04ASV$Sum <- rep(0, each = nrow(total04ASV))
total04ASV$Count <- rep(0, each = nrow(total04ASV))
for (i in total04ASV$DivisionMix) { total04ASV$Count[which(total04ASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(Total04))}
total04ASV$Sum <- sum(total04ASV$Count)
colnames(total06ASV)[2]  <- "value"
total06ASV$Sum <- rep(0, each = nrow(total06ASV))
total06ASV$Count <- rep(0, each = nrow(total06ASV))
for (i in total06ASV$DivisionMix) { total06ASV$Count[which(total06ASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(Total06))}
total06ASV$Sum <- sum(total06ASV$Count)
colnames(total09ASV)[2]  <- "value"
total09ASV$Sum <- rep(0, each = nrow(total09ASV))
total09ASV$Count <- rep(0, each = nrow(total09ASV))
for (i in total09ASV$DivisionMix) { total09ASV$Count[which(total09ASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(Total09))}
total09ASV$Sum <- sum(total09ASV$Count)
colnames(total11ASV)[2]  <- "value"
total11ASV$Sum <- rep(0, each = nrow(total11ASV))
total11ASV$Count <- rep(0, each = nrow(total11ASV))
for (i in total11ASV$DivisionMix) { total11ASV$Count[which(total11ASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(Total11))}
total11ASV$Sum <- sum(total11ASV$Count)
totalDateASV <- rbind(total04ASV,total06ASV,total09ASV,total11ASV)
#Figure
dy <- ggplot(totalDateASV, mapping = aes(y= value, x = Date, fill = DivisionMix, group = DivisionMix), Rowv = NA, col = colMain, scale = "column") + geom_bar(stat="identity") + scale_fill_manual(values = paletxi)+
geom_label(aes(y = 106,label = paste(Sum," ASVs",sep ="\n")),color = "white",size = 3,show.legend = FALSE, fill = "#3B3B3B99")
dy <- dy + theme(legend.position = "none") + labs(x="Dates",y="ASVs (%)")
print(dy)
svglite("Hist-Taxomy/ASVMix-Total.svg",width = 14.00,height = 7.00)
b_plot <- plot_grid(ay,by,cy,dy,legendASV, ncol = 5, nrow = 1, rel_widths = c(3,3,3,6,4),rel_heights = c(3))
print(b_plot)
dev.off()
# Hist ASV TOTAL Mix ---------------------------------------------------------------------
# Cycle -------------------------------------------------------------------
## Jour
totalJourASV <- data_asv_tax %>% select(ASV_Id,TotalJour,DivisionMix)
row.names(totalJourASV)<-totalJourASV$ASV_Id ; totalJourASV <- totalJourASV %>% select(-ASV_Id)
totalJourASV <- totalJourASV %>% group_by(DivisionMix) %>% summarise_all(sum)
totalJourASV$TotalJour <- totalJourASV$TotalJour*100/sum(totalJourASV$TotalJour)
totalJourASV <- totalJourASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(TotalJour) - 0.5*TotalJour)
totalJourASV$label <- paste(round(totalJourASV$TotalJour,1), "%", sep = "")
for (i in rownames(totalJourASV)) {
if (totalJourASV[i,"label"] == "0%") { totalJourASV[i,"label"] <- NA}}
for (i in rownames(totalJourASV)) {
if (is.na(totalJourASV[i,"label"]) == FALSE) { totalJourASV[i,"label"] <- paste(totalJourASV[i,"DivisionMix"]," : ",totalJourASV[i,"label"], sep = "")}}
totalJourASV$Cycle<- rep("Jour", each = nrow(totalJourASV))
##Nuit
totalNuitASV <- data_asv_tax %>% select(ASV_Id,TotalNuit,DivisionMix)
row.names(totalNuitASV)<-totalNuitASV$ASV_Id ; totalNuitASV <- totalNuitASV %>% select(-ASV_Id)
totalNuitASV <- totalNuitASV %>% group_by(DivisionMix) %>% summarise_all(sum)
totalNuitASV$TotalNuit <- totalNuitASV$TotalNuit*100/sum(totalNuitASV$TotalNuit)
totalNuitASV <- totalNuitASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(TotalNuit) - 0.5*TotalNuit)
totalNuitASV$label <- paste(round(totalNuitASV$TotalNuit,1), "%", sep = "")
for (i in rownames(totalNuitASV)) {
if (totalNuitASV[i,"label"] == "0%") { totalNuitASV[i,"label"] <- NA}}
for (i in rownames(totalNuitASV)) {
if (is.na(totalNuitASV[i,"label"]) == FALSE) { totalNuitASV[i,"label"] <- paste(totalNuitASV[i,"DivisionMix"]," : ",totalNuitASV[i,"label"], sep = "")}}
totalNuitASV$Cycle<- rep("Nuit", each = nrow(totalNuitASV))
##Cycle
colnames(totalJourASV)[2]  <- "value"
totalJourASV$Sum <- rep(0, each = nrow(totalJourASV))
totalJourASV$Count <- rep(0, each = nrow(totalJourASV))
for (i in totalJourASV$DivisionMix) { totalJourASV$Count[which(totalJourASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(TotalJour))}
totalJourASV$Sum <- sum(totalJourASV$Count)
colnames(totalNuitASV)[2]  <- "value"
totalNuitASV$Sum <- rep(0, each = nrow(totalNuitASV))
totalNuitASV$Count <- rep(0, each = nrow(totalNuitASV))
for (i in totalNuitASV$DivisionMix) { totalNuitASV$Count[which(totalNuitASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(TotalNuit))}
totalNuitASV$Sum <- sum(totalNuitASV$Count)
totalCycleASV <- rbind(totalJourASV,totalNuitASV)
#Figure
ay <- ggplot(totalCycleASV, mapping = aes(y= value, x = Cycle, fill = DivisionMix, group = DivisionMix), Rowv = NA, col = colMain, scale = "column") + geom_bar(stat="identity") + scale_fill_manual(values = paletxi) +
geom_label(aes(y = 106,label = paste(Sum," ASVs",sep ="\n")),color = "white",size = 3,show.legend = FALSE, fill = "#3B3B3B99")
legendASV <- get_legend(ay)
ay <- ay + labs(x="Cycles",y="ASVs (%)") + theme(legend.position = "none")
print(ay)
# Zone -------------------------------------------------------------------
## Oxique
totalOxiqueASV <- data_asv_tax %>% select(ASV_Id,TotalOxique,DivisionMix)
row.names(totalOxiqueASV)<-totalOxiqueASV$ASV_Id ; totalOxiqueASV <- totalOxiqueASV %>% select(-ASV_Id)
totalOxiqueASV <- totalOxiqueASV %>% group_by(DivisionMix) %>% summarise_all(sum)
totalOxiqueASV$TotalOxique <- totalOxiqueASV$TotalOxique*100/sum(totalOxiqueASV$TotalOxique)
totalOxiqueASV <- totalOxiqueASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(TotalOxique) - 0.5*TotalOxique)
totalOxiqueASV$label <- paste(round(totalOxiqueASV$TotalOxique,1), "%", sep = "")
for (i in rownames(totalOxiqueASV)) {
if (totalOxiqueASV[i,"label"] == "0%") { totalOxiqueASV[i,"label"] <- NA}}
for (i in rownames(totalOxiqueASV)) {
if (is.na(totalOxiqueASV[i,"label"]) == FALSE) { totalOxiqueASV[i,"label"] <- paste(totalOxiqueASV[i,"DivisionMix"]," : ",totalOxiqueASV[i,"label"], sep = "")}}
totalOxiqueASV$Zone<- rep("Oxique", each = nrow(totalOxiqueASV))
## Anoxique
totalAnoxiqueASV <- data_asv_tax %>% select(ASV_Id,TotalAnoxique,DivisionMix)
row.names(totalAnoxiqueASV)<-totalAnoxiqueASV$ASV_Id ; totalAnoxiqueASV <- totalAnoxiqueASV %>% select(-ASV_Id)
totalAnoxiqueASV <- totalAnoxiqueASV %>% group_by(DivisionMix) %>% summarise_all(sum)
totalAnoxiqueASV$TotalAnoxique <- totalAnoxiqueASV$TotalAnoxique*100/sum(totalAnoxiqueASV$TotalAnoxique)
totalAnoxiqueASV <- totalAnoxiqueASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(TotalAnoxique) - 0.5*TotalAnoxique)
totalAnoxiqueASV$label <- paste(round(totalAnoxiqueASV$TotalAnoxique,1), "%", sep = "")
for (i in rownames(totalAnoxiqueASV)) {
if (totalAnoxiqueASV[i,"label"] == "0%") { totalAnoxiqueASV[i,"label"] <- NA}}
for (i in rownames(totalAnoxiqueASV)) {
if (is.na(totalAnoxiqueASV[i,"label"]) == FALSE) { totalAnoxiqueASV[i,"label"] <- paste(totalAnoxiqueASV[i,"DivisionMix"]," : ",totalAnoxiqueASV[i,"label"], sep = "")}}
totalAnoxiqueASV$Zone<- rep("Anoxique", each = nrow(totalAnoxiqueASV))
## Zone
colnames(totalOxiqueASV)[2]  <- "value"
totalOxiqueASV$Sum <- rep(0, each = nrow(totalOxiqueASV))
totalOxiqueASV$Count <- rep(0, each = nrow(totalOxiqueASV))
for (i in totalOxiqueASV$DivisionMix) { totalOxiqueASV$Count[which(totalOxiqueASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(TotalOxique))}
totalOxiqueASV$Sum <- sum(totalOxiqueASV$Count)
colnames(totalAnoxiqueASV)[2]  <- "value"
totalAnoxiqueASV$Sum <- rep(0, each = nrow(totalAnoxiqueASV))
totalAnoxiqueASV$Count <- rep(0, each = nrow(totalAnoxiqueASV))
for (i in totalAnoxiqueASV$DivisionMix) { totalAnoxiqueASV$Count[which(totalAnoxiqueASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(TotalAnoxique))}
totalAnoxiqueASV$Sum <- sum(totalAnoxiqueASV$Count)
totalZoneASV <- rbind(totalOxiqueASV,totalAnoxiqueASV)
#Figure
by <- ggplot(totalZoneASV, mapping = aes(y= value, x = Zone, fill = DivisionMix, group = DivisionMix), Rowv = NA, col = colMain, scale = "column") + geom_bar(stat="identity") + scale_fill_manual(values = paletxi) +
geom_label(aes(y = 106,label = paste(Sum," ASVs",sep ="\n")),color = "white",size = 3,show.legend = FALSE, fill = "#3B3B3B99")
by <- by + labs(x="Zones",y="ASVs (%)") + theme(legend.position = "none")
print(by)
# Fraction -------------------------------------------------------------------
## Petite
totalPetiteASV <- data_asv_tax %>% select(ASV_Id,TotalPetite,DivisionMix)
row.names(totalPetiteASV)<-totalPetiteASV$ASV_Id ; totalPetiteASV <- totalPetiteASV %>% select(-ASV_Id)
totalPetiteASV <- totalPetiteASV %>% group_by(DivisionMix) %>% summarise_all(sum)
totalPetiteASV$TotalPetite <- totalPetiteASV$TotalPetite*100/sum(totalPetiteASV$TotalPetite)
totalPetiteASV <- totalPetiteASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(TotalPetite) - 0.5*TotalPetite)
totalPetiteASV$label <- paste(round(totalPetiteASV$TotalPetite,1), "%", sep = "")
for (i in rownames(totalPetiteASV)) {
if (totalPetiteASV[i,"label"] == "0%") { totalPetiteASV[i,"label"] <- NA}}
for (i in rownames(totalPetiteASV)) {
if (is.na(totalPetiteASV[i,"label"]) == FALSE) { totalPetiteASV[i,"label"] <- paste(totalPetiteASV[i,"DivisionMix"]," : ",totalPetiteASV[i,"label"], sep = "")}}
totalPetiteASV$Fraction<- rep("Petite", each = nrow(totalPetiteASV))
## Grande
totalGrandeASV <- data_asv_tax %>% select(ASV_Id,TotalGrande,DivisionMix)
row.names(totalGrandeASV)<-totalGrandeASV$ASV_Id ; totalGrandeASV <- totalGrandeASV %>% select(-ASV_Id)
totalGrandeASV <- totalGrandeASV %>% group_by(DivisionMix) %>% summarise_all(sum)
totalGrandeASV$TotalGrande <- totalGrandeASV$TotalGrande*100/sum(totalGrandeASV$TotalGrande)
totalGrandeASV <- totalGrandeASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(TotalGrande) - 0.5*TotalGrande)
totalGrandeASV$label <- paste(round(totalGrandeASV$TotalGrande,1), "%", sep = "")
for (i in rownames(totalGrandeASV)) {
if (totalGrandeASV[i,"label"] == "0%") { totalGrandeASV[i,"label"] <- NA}}
for (i in rownames(totalGrandeASV)) {
if (is.na(totalGrandeASV[i,"label"]) == FALSE) { totalGrandeASV[i,"label"] <- paste(totalGrandeASV[i,"DivisionMix"]," : ",totalGrandeASV[i,"label"], sep = "")}}
totalGrandeASV$Fraction<- rep("Grande", each = nrow(totalGrandeASV))
## Fraction
colnames(totalPetiteASV)[2]  <- "value"
totalPetiteASV$Sum <- rep(0, each = nrow(totalPetiteASV))
totalPetiteASV$Count <- rep(0, each = nrow(totalPetiteASV))
for (i in totalPetiteASV$DivisionMix) { totalPetiteASV$Count[which(totalPetiteASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(TotalPetite))}
totalPetiteASV$Sum <- sum(totalPetiteASV$Count)
colnames(totalGrandeASV)[2]  <- "value"
totalGrandeASV$Sum <- rep(0, each = nrow(totalGrandeASV))
totalGrandeASV$Count <- rep(0, each = nrow(totalGrandeASV))
for (i in totalGrandeASV$DivisionMix) { totalGrandeASV$Count[which(totalGrandeASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(TotalGrande))}
totalGrandeASV$Sum <- sum(totalGrandeASV$Count)
totalFractionASV <- rbind(totalPetiteASV,totalGrandeASV)
#Figure
cy <- ggplot(totalFractionASV, mapping = aes(y= value, x = Fraction, fill = DivisionMix, group = DivisionMix), Rowv = NA, col = colMain, scale = "column") + geom_bar(stat="identity") + scale_fill_manual(values = paletxi)+
geom_label(aes(y = 106,label = paste(Sum," ASVs",sep ="\n")),color = "white",size = 3,show.legend = FALSE, fill = "#3B3B3B99")
cy <- cy + labs(x="Fractions",y="ASVs (%)") + theme(legend.position = "none")
print(cy)
# Date -------------------------------------------------------------------
## Avril
total04ASV <- data_asv_tax %>% select(ASV_Id,Total04,DivisionMix)
row.names(total04ASV)<-total04ASV$ASV_Id ; total04ASV <- total04ASV %>% select(-ASV_Id)
total04ASV <- total04ASV %>% group_by(DivisionMix) %>% summarise_all(sum)
total04ASV$Total04 <- total04ASV$Total04*100/sum(total04ASV$Total04)
total04ASV <- total04ASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(Total04) - 0.5*Total04)
total04ASV$label <- paste(round(total04ASV$Total04,1), "%", sep = "")
for (i in rownames(total04ASV)) {
if (total04ASV[i,"label"] == "0%") { total04ASV[i,"label"] <- NA}}
for (i in rownames(total04ASV)) {
if (is.na(total04ASV[i,"label"]) == FALSE) { total04ASV[i,"label"] <- paste(total04ASV[i,"DivisionMix"]," : ",total04ASV[i,"label"], sep = "")}}
total04ASV$Date<- rep("04", each = nrow(total04ASV))
## Juin
total06ASV <- data_asv_tax %>% select(ASV_Id,Total06,DivisionMix)
row.names(total06ASV)<-total06ASV$ASV_Id ; total06ASV <- total06ASV %>% select(-ASV_Id)
total06ASV <- total06ASV %>% group_by(DivisionMix) %>% summarise_all(sum)
total06ASV$Total06 <- total06ASV$Total06*100/sum(total06ASV$Total06)
total06ASV <- total06ASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(Total06) - 0.5*Total06)
total06ASV$label <- paste(round(total06ASV$Total06,1), "%", sep = "")
for (i in rownames(total06ASV)) {
if (total06ASV[i,"label"] == "0%") { total06ASV[i,"label"] <- NA}}
for (i in rownames(total06ASV)) {
if (is.na(total06ASV[i,"label"]) == FALSE) { total06ASV[i,"label"] <- paste(total06ASV[i,"DivisionMix"]," : ",total06ASV[i,"label"], sep = "")}}
total06ASV$Date<- rep("06", each = nrow(total06ASV))
## Septembre
total09ASV <- data_asv_tax %>% select(ASV_Id,Total09,DivisionMix)
row.names(total09ASV)<-total09ASV$ASV_Id ; total09ASV <- total09ASV %>% select(-ASV_Id)
total09ASV <- total09ASV %>% group_by(DivisionMix) %>% summarise_all(sum)
total09ASV$Total09 <- total09ASV$Total09*100/sum(total09ASV$Total09)
total09ASV <- total09ASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(Total09) - 0.5*Total09)
total09ASV$label <- paste(round(total09ASV$Total09,1), "%", sep = "")
for (i in rownames(total09ASV)) {
if (total09ASV[i,"label"] == "0%") { total09ASV[i,"label"] <- NA}}
for (i in rownames(total09ASV)) {
if (is.na(total09ASV[i,"label"]) == FALSE) { total09ASV[i,"label"] <- paste(total09ASV[i,"DivisionMix"]," : ",total09ASV[i,"label"], sep = "")}}
total09ASV$Date<- rep("09", each = nrow(total09ASV))
## Octobre
total11ASV <- data_asv_tax %>% select(ASV_Id,Total11,DivisionMix)
row.names(total11ASV)<-total11ASV$ASV_Id ; total11ASV <- total11ASV %>% select(-ASV_Id)
total11ASV <- total11ASV %>% group_by(DivisionMix) %>% summarise_all(sum)
total11ASV$Total11 <- total11ASV$Total11*100/sum(total11ASV$Total11)
total11ASV <- total11ASV %>%
arrange(desc(DivisionMix)) %>%
mutate(lab.ypos = cumsum(Total11) - 0.5*Total11)
total11ASV$label <- paste(round(total11ASV$Total11,1), "%", sep = "")
for (i in rownames(total11ASV)) {
if (total11ASV[i,"label"] == "0%") { total11ASV[i,"label"] <- NA}}
for (i in rownames(total11ASV)) {
if (is.na(total11ASV[i,"label"]) == FALSE) { total11ASV[i,"label"] <- paste(total11ASV[i,"DivisionMix"]," : ",total11ASV[i,"label"], sep = "")}}
total11ASV$Date<- rep("11", each = nrow(total11ASV))
## Date
colnames(total04ASV)[2]  <- "value"
total04ASV$Sum <- rep(0, each = nrow(total04ASV))
total04ASV$Count <- rep(0, each = nrow(total04ASV))
for (i in total04ASV$DivisionMix) { total04ASV$Count[which(total04ASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(Total04))}
total04ASV$Sum <- sum(total04ASV$Count)
colnames(total06ASV)[2]  <- "value"
total06ASV$Sum <- rep(0, each = nrow(total06ASV))
total06ASV$Count <- rep(0, each = nrow(total06ASV))
for (i in total06ASV$DivisionMix) { total06ASV$Count[which(total06ASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(Total06))}
total06ASV$Sum <- sum(total06ASV$Count)
colnames(total09ASV)[2]  <- "value"
total09ASV$Sum <- rep(0, each = nrow(total09ASV))
total09ASV$Count <- rep(0, each = nrow(total09ASV))
for (i in total09ASV$DivisionMix) { total09ASV$Count[which(total09ASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(Total09))}
total09ASV$Sum <- sum(total09ASV$Count)
colnames(total11ASV)[2]  <- "value"
total11ASV$Sum <- rep(0, each = nrow(total11ASV))
total11ASV$Count <- rep(0, each = nrow(total11ASV))
for (i in total11ASV$DivisionMix) { total11ASV$Count[which(total11ASV$DivisionMix == i)] <- sum(data_asv_tax  %>% filter(DivisionMix == i) %>% select(Total11))}
total11ASV$Sum <- sum(total11ASV$Count)
totalDateASV <- rbind(total04ASV,total06ASV,total09ASV,total11ASV)
#Figure
dy <- ggplot(totalDateASV, mapping = aes(y= value, x = Date, fill = DivisionMix, group = DivisionMix), Rowv = NA, col = colMain, scale = "column") + geom_bar(stat="identity") + scale_fill_manual(values = paletxi)+
geom_label(aes(y = 106,label = paste(Sum," ASVs",sep ="\n")),color = "white",size = 3,show.legend = FALSE, fill = "#3B3B3B99")
dy <- dy + theme(legend.position = "none") + labs(x="Dates",y="ASVs (%)")
print(dy)
# Coplot -------------------------------------------------------------------
svglite("Hist-Taxomy/ASVMix-Total.svg",width = 14.00,height = 7.00)
b_plot <- plot_grid(ay,by,cy,dy,legendASV, ncol = 5, nrow = 1, rel_widths = c(3,3,3,6,4),rel_heights = c(3))
print(b_plot)
dev.off()
load("~/Desktop/Article Arthur/Process_Final_DADA2_PR2/dataDADA2/result/V4-unified-correct-paired-out-ArticleV2/Table/my_work_space_Compo.RData")
View(ASV_stat_pool_rare_FractionXZone_melt)
pkg <- c("ggplot2", "readxl","dplyr","tidyr","cowplot","FactoMineR","factoextra","reshape2","varhandle","ggrepel","ggpubr","ggsci","scales","hrbrthemes","GUniFrac","svglite","treemap", "VennDiagram","stringr","paletteer","elementalist","gtools")
lapply(pkg, require, character.only = TRUE)
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = `Abundance`)) +facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2") +
scale_y_continuous() +
scale_x_continuous(trans = log2_trans(),breaks = w) +
labs(y="ASVs #") +
theme(legend.title = element_text(face="bold"),
axis.title = element_text(color = "black", face = "bold"),
strip.text.x = element_text(color = "black", face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)) + theme_unique_art() + scale_fill_manual(values = palet_monimixo)
palet_monimixo <- paletteer_d("ggthemes::Nuriel_Stone",n=2,direction=-1)
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = `Abundance`)) +facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2") +
scale_y_continuous() +
scale_x_continuous(trans = log2_trans(),breaks = w) +
labs(y="ASVs #") +
theme(legend.title = element_text(face="bold"),
axis.title = element_text(color = "black", face = "bold"),
strip.text.x = element_text(color = "black", face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)) + theme_unique_art() + scale_fill_manual(values = palet_monimixo)
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = `Abundance`)) + facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2")
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = `Abundance`)) + facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2") +
scale_y_continuous() +
scale_x_continuous(trans = log2_trans(),breaks = w) +
labs(y="ASVs #")
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = `Abundance`)) + facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2") +
scale_y_continuous() +
scale_x_continuous(trans = log2_trans(),breaks = w)
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = `Abundance`)) + facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2") +
scale_y_continuous()
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = Abundance)) + facet_grid(.~Fraction)
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = Abundance)) + facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2")
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = Abundance)) + facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2")
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = Abundance)) + facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2") +
scale_y_continuous()
w <- 0
i <- 1
while ( i < max(ASV_stat_pool_rare_FractionXZone_melt$Abundance)) { print (i)
w <- c(w,i)
i <- i*4}
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = Abundance)) + facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2") +
scale_y_continuous() +
scale_x_continuous(trans = log2_trans(),breaks = w) +
labs(y="ASVs #")
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = Abundance)) + facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2") +
scale_y_continuous() +
scale_x_continuous(trans = log2_trans(),breaks = w) +
labs(y="ASVs #") +
theme(legend.title = element_text(face="bold"),
axis.title = element_text(color = "black", face = "bold"),
strip.text.x = element_text(color = "black", face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)) + theme_unique_art() + scale_fill_manual(values = palet_monimixo)
svglite("Stat-Analyse/ASV-Stat-FractionXZone.svg",width = 12.00,height = 5.00)
ggplot(ASV_stat_pool_rare_FractionXZone_melt, aes(x = Abundance)) + facet_grid(.~Fraction) +
stat_bin(binwidth = 1,color = "white", aes(fill = Zone), alpha = 1, position = "dodge2") +
scale_y_continuous() +
scale_x_continuous(trans = log2_trans(),breaks = w) +
labs(y="ASVs #") +
theme(legend.title = element_text(face="bold"),
axis.title = element_text(color = "black", face = "bold"),
strip.text.x = element_text(color = "black", face = "bold", size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)) + theme_unique_art() + scale_fill_manual(values = palet_monimixo)
dev.off()
load("~/Desktop/Article Arthur/Process_Final_DADA2_PR2/dataDADA2/result/V4-unified-correct-paired-ArticleV2/Table/my_work_space_Compo.RData")
View(ASV_stat_pool_rare_FractionXZone_melt)
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Abundance ==1))
# Import package and palette -----------------------------------------------------------
pkg <- c("ggplot2", "readxl","dplyr","tidyr","cowplot","FactoMineR","factoextra","reshape2","varhandle","ggrepel","ggpubr","ggsci","scales","hrbrthemes","GUniFrac","svglite","treemap", "VennDiagram","stringr","paletteer","elementalist","gtools")
lapply(pkg, require, character.only = TRUE)
palette <- c("#AD002ACC","#EEA236CC","#00468BCC","#0099B4CC","#D62768CC","#ADB6B6CC","#42B540CC","#357EBDCC","#1B1919CC","#ED0000CC","#FF7F0ECC","#925E9FCC","#D43F3ACC","#9632B8CC","#46B8DACC","#5CB85CCC","#EFC008CC")
#show_col(palette)
palet_monimixo <- paletteer_d("ggthemes::Nuriel_Stone",n=2,direction=-1)
# Import package and palette -----------------------------------------------------------
pkg <- c("ggplot2", "readxl","dplyr","tidyr","cowplot","FactoMineR","factoextra","reshape2","varhandle","ggrepel","ggpubr","ggsci","scales","hrbrthemes","GUniFrac","svglite","treemap", "VennDiagram","stringr","paletteer","elementalist","gtools")
lapply(pkg, require, character.only = TRUE)
palette <- c("#AD002ACC","#EEA236CC","#00468BCC","#0099B4CC","#D62768CC","#ADB6B6CC","#42B540CC","#357EBDCC","#1B1919CC","#ED0000CC","#FF7F0ECC","#925E9FCC","#D43F3ACC","#9632B8CC","#46B8DACC","#5CB85CCC","#EFC008CC")
#show_col(palette)
palet_monimixo <- paletteer_d("ggthemes::Nuriel_Stone",n=2,direction=-1)
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Abundance ==1))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Monimolimnion") %>% filter(Fraction == "Small") %>% filter(Abundance ==1))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Mixolimnion") %>% filter(Fraction == "Small") %>% filter(Abundance ==1))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Mixolimnion") %>% filter(Fraction == "Large") %>% filter(Abundance ==1))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Monimolimnion") %>% filter(Fraction == "Large") %>% filter(Abundance ==1))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Monimolimnion") %>% filter(Fraction == "Large") %>% filter(Abundance ==2))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Mixolimnion") %>% filter(Fraction == "Large") %>% filter(Abundance ==2))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Mixolimnion") %>% filter(Fraction == "Large") %>% filter(Abundance ==256))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Mixolimnion") %>% filter(Fraction == "Large") %>% filter(Abundance == 256))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Mixolimnion") %>% filter(Fraction == "Small") %>% filter(Abundance == 256))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Monimolimnion") %>% filter(Fraction == "Small") %>% filter(Abundance == 256))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Monimolimnion") %>% filter(Fraction == "Large") %>% filter(Abundance == 256))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Monimolimnion") %>% filter(Fraction == "Large") %>% filter(Abundance == 257))
nrow(ASV_stat_pool_rare_FractionXZone_melt %>% filter(Zone == "Monimolimnion") %>% filter(Fraction == "Large") %>% filter(Abundance == 258))
devtools::install_github("benjjneb/dada2", ref="v1.18")
#                                 _       _
#     /\                         (_)     | |
#    /  \   _ __ ___   ___  _ __  _  ___ | |_
#   / /\ \ | '_ ` _ \ / _ \| '_ \| |/ _ \| __|
#  / ____ \| | | | | | (_) | | | | | (_) | |_
# /_/    \_\_| |_| |_|\___/|_| |_| |\___/ \__|
#                               _/ |
#                              |__/
# !/usr/bin/env Rscript
# 15/04/2021
#
# Script to process metabarcoding data with DADA2
# Set directory, input and output -----------------------------------------------------------
# Detect R or Rstudio
se <- Sys.getenv()
if (length(se[grepl("rstudio",se,ignore.case=TRUE)]) > 0 ) { inputmode <- TRUE }
if (length(se[grepl("rstudio",se,ignore.case=TRUE)]) == 0 ) { inputmode <- FALSE }
#
# Input argument if using Rstudio
if (inputmode == TRUE) {
input <- "V4-unified-correct-paired"
dataBase <- "pr2_version_4.13.0_18S_dada2.fasta.gz"
result <- "V4-unified-correct-paired-out"
minLen <- 200
maxLen <- 500
maxN <- 0
minOverlap <- 50
maxMismatch <- 0
Nthread <- 6
FWD <- "GTGYCAGCMGCCGCGGTA"
REV <- "TTGGYRAATGCTTTCGC"
cutadapt <- "/Users/arthur/miniconda3/envs/cutadaptenv/bin/cutadapt" # CHANGE ME to the cutadapt path on your machine
}
#
# Set argument if using R
args = commandArgs(trailingOnly=TRUE)
if ( inputmode == FALSE ) {
input <- args[1]
dataBase <- args[2]
result <- args[3]
minLen <- as.numeric(args[4])
maxLen <- as.numeric(args[5])
maxN <- as.numeric(args[6])
minOverlap <- as.numeric(args[7])
maxMismatch <- as.numeric(args[8])
Nthread <- as.numeric(args[9])
FWD <- args[10]
REV <- args[11]
cutadapt <- args[12]
}
#
pkg <- c("readxl","dplyr","tidyr","svglite","stringr","dada2","ShortRead","Biostrings")
lapply(pkg, require, character.only = TRUE)
library(dada2)
getwd()
scores(NMDS_tab) %>%
cbind(samples_df)
library(vegan)
